generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(cuid())
  firstName           String?
  lastName            String?
  username            String?        
  photoUrl            String?        
  isBot               Boolean?       @default(false) 
  isPremium           Boolean?       @default(false) 
  languageCode        String?        
  allowsWriteToPm     Boolean?       @default(false) 
  addedToAttachmentMenu Boolean?     @default(false) 
  walletAddress       String?
  telegramHandle      String?
  telegramId          BigInt         @unique
  birthdate           DateTime?
  tokenBalance        Float          @default(1000)
  lastPeriodDate      DateTime?   // TODO: delete it
  menstruations       Menstruation[]
  invitationsSent     Invitation[]   @relation("Inviter")
  invitationsReceived Invitation[]   @relation("Invitee")
  socialMedia         SocialMedia[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  farming             FarmingSession[]
  balanceHistory      BalanceHistory[]
  userChallenges      UserChallenge[]

  

  @@index([telegramId], name: "telegramId_index")
  
  player Player[]
}

model BalanceHistory {
  id        String   @id @default(cuid())
  userId    String
  amount    Float
  reason    String
  refLink   String?
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model UserChallenge {
  id        String   @id @default(cuid())
  userId    String
  challengeId String
  completed Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, challengeId])
}

model FarmingSession {
  id            String   @id @default(cuid())
  userId        String
  timeFinish    DateTime
  totalReward   Float
  prizeReceived Boolean  @default(false) // Short name for prize received indicator
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Menstruation {
  id        String   @id @default(cuid())
  date      DateTime
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Invitation {
  id        String   @id @default(cuid())
  inviterId String
  inviteeId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invitee   User?    @relation("Invitee", fields: [inviteeId], references: [id])
  inviter   User     @relation("Inviter", fields: [inviterId], references: [id])
}

model SocialMedia {
  id        String   @id @default(cuid())
  platform  String
  handle    String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

//MAFSTAT

model Game {
  id           String       @id @default(cuid())
  date         DateTime
  timeEnd      DateTime     @default(now())
  name         String
  firstKill    Int          @default(0)
  bestMove     Json
  typeLabel    String
  typeGame     String
  resultLabel  String
  resultCivilian Int
  resultMafia  Int
  resultDeadHeat Int
  table        Int          @default(1)
  about        String?
  judge        Judge[]
  players      Player[]
  ratings      Rating[]
  actions      Action[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  clubId       String
  club         Club         @relation(fields: [clubId], references: [id])
}

model Player {
  id          String       @id @default(cuid())
  nickname    String       @unique
  roles       Role[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  games       Game[]
  club        Club[]
  action      Action[]
  judge       Judge[]
}

model Rating {
  id            String       @id @default(cuid())
  name          String
  date          DateTime
  clubId        String
  ratings       Json
  games         Game[]
  clubs         Club[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

}

model Club {
  id            String       @id @default(cuid())
  name          String
  city          String
  url           String
  ratings       Rating[]
  games         Game[]
  players       Player[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Action {
  id         String    @id @default(cuid())
  gameId     String
  playerId   String
  actionType String    // Например: "vote", "kill", "defend"
  targetId   String      // Ссылка на другого игрока, если действие направлено на него
  timestamp  DateTime  @default(now())
  game       Game      @relation(fields: [gameId], references: [id])
  player     Player    @relation(fields: [playerId], references: [id])
}

model Judge {
  id         Int    @id @default(autoincrement())
  playerId   String
  player     Player    @relation(fields: [playerId], references: [id])
  value      Json
  games      Game[]
}

model Role {
  id    Int    @id @default(autoincrement())
  text  String
  url   String
  team  String
  value Json

  player Player[]
}

model Result {
  id     Int    @id @default(autoincrement())
  text   String
  result String
  value  Json
}

//MoneyMess

model Character {
  id        String  @id @default(cuid())
  firstname String
  lastname  String
  nickname  String
  src       String
  rarity    String
  
}